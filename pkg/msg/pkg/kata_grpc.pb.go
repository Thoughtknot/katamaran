// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: pkg/kata.proto

package msg

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KatamaranClient is the client API for Katamaran service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KatamaranClient interface {
	AppendEntry(ctx context.Context, in *AppendEntriesReq, opts ...grpc.CallOption) (*AppendEntriesRsp, error)
	RequestAllVotes(ctx context.Context, in *RequestVotesReq, opts ...grpc.CallOption) (*RequestVotesRsp, error)
	AddEntry(ctx context.Context, in *AddEntryReq, opts ...grpc.CallOption) (*Empty, error)
}

type katamaranClient struct {
	cc grpc.ClientConnInterface
}

func NewKatamaranClient(cc grpc.ClientConnInterface) KatamaranClient {
	return &katamaranClient{cc}
}

func (c *katamaranClient) AppendEntry(ctx context.Context, in *AppendEntriesReq, opts ...grpc.CallOption) (*AppendEntriesRsp, error) {
	out := new(AppendEntriesRsp)
	err := c.cc.Invoke(ctx, "/msg.Katamaran/AppendEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *katamaranClient) RequestAllVotes(ctx context.Context, in *RequestVotesReq, opts ...grpc.CallOption) (*RequestVotesRsp, error) {
	out := new(RequestVotesRsp)
	err := c.cc.Invoke(ctx, "/msg.Katamaran/RequestAllVotes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *katamaranClient) AddEntry(ctx context.Context, in *AddEntryReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/msg.Katamaran/AddEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KatamaranServer is the server API for Katamaran service.
// All implementations must embed UnimplementedKatamaranServer
// for forward compatibility
type KatamaranServer interface {
	AppendEntry(context.Context, *AppendEntriesReq) (*AppendEntriesRsp, error)
	RequestAllVotes(context.Context, *RequestVotesReq) (*RequestVotesRsp, error)
	AddEntry(context.Context, *AddEntryReq) (*Empty, error)
	mustEmbedUnimplementedKatamaranServer()
}

// UnimplementedKatamaranServer must be embedded to have forward compatible implementations.
type UnimplementedKatamaranServer struct {
}

func (UnimplementedKatamaranServer) AppendEntry(context.Context, *AppendEntriesReq) (*AppendEntriesRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppendEntry not implemented")
}
func (UnimplementedKatamaranServer) RequestAllVotes(context.Context, *RequestVotesReq) (*RequestVotesRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestAllVotes not implemented")
}
func (UnimplementedKatamaranServer) AddEntry(context.Context, *AddEntryReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddEntry not implemented")
}
func (UnimplementedKatamaranServer) mustEmbedUnimplementedKatamaranServer() {}

// UnsafeKatamaranServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KatamaranServer will
// result in compilation errors.
type UnsafeKatamaranServer interface {
	mustEmbedUnimplementedKatamaranServer()
}

func RegisterKatamaranServer(s grpc.ServiceRegistrar, srv KatamaranServer) {
	s.RegisterService(&Katamaran_ServiceDesc, srv)
}

func _Katamaran_AppendEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendEntriesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KatamaranServer).AppendEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msg.Katamaran/AppendEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KatamaranServer).AppendEntry(ctx, req.(*AppendEntriesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Katamaran_RequestAllVotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestVotesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KatamaranServer).RequestAllVotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msg.Katamaran/RequestAllVotes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KatamaranServer).RequestAllVotes(ctx, req.(*RequestVotesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Katamaran_AddEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddEntryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KatamaranServer).AddEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msg.Katamaran/AddEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KatamaranServer).AddEntry(ctx, req.(*AddEntryReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Katamaran_ServiceDesc is the grpc.ServiceDesc for Katamaran service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Katamaran_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "msg.Katamaran",
	HandlerType: (*KatamaranServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AppendEntry",
			Handler:    _Katamaran_AppendEntry_Handler,
		},
		{
			MethodName: "RequestAllVotes",
			Handler:    _Katamaran_RequestAllVotes_Handler,
		},
		{
			MethodName: "AddEntry",
			Handler:    _Katamaran_AddEntry_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/kata.proto",
}
